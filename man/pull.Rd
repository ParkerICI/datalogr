% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pull.R
\name{pull}
\alias{pull}
\title{Creates pull expressions}
\usage{
pull(...)
}
\arguments{
\item{...}{This function takes exactly 2 arguments which must be specified in
  the following order (named arguments are not supported, the arguments
  are matched positionally)
\itemize{
  \item The variable representing the entity id from which the pull is initiated
  \item The pull expression
}}
}
\value{
Returns a data structure representing the pull expression, suitable
  for inclusion in the \code{find} clause of a query
}
\description{
This function creates Datomic pull expressions. The following rules apply
when converting R expressions to Datomic pull expressions:
\itemize{
  \item Clojure vector literals (i.e. \code{[]}) are represented
    as \code{c()} in R
  \item Clojure map literalas (i.e. \code{{key val}}) are represented
    as \code{{key = val}} in R
  \item Back references are specified by pre-prending a \code{.} to the
    attribute name (instead of a \code{_}). E.g. the Clojure \code{variant/_gene}
    becomes \code{variant/.gene}
  \item The wildcard pattern \code{*} is represented as \code{.} in R
  \item Strings containing the \code{/} character are assumed to represent
    qualified symbol names and are converted by pre-prending the \code{:} character.
    E.g. the Clojure \code{:variant/gene} becomes \code{variant/gene}
}
}
\examples{
qq <- query(
  find(pull(?s, c({sample/subject = c(.)}, .))),
  where(
    d(?s, sample/id, ?id)
  )
)
do_query(qq)

qq <- query(
  find(pull(?g, c(gene/hugo, {variant/.gene = c({variant/type = c(db/ident)}, .)})))
  where(
    d(?g, gene/hugo, ?hugo)
  )
)
do_query(qq)

}
